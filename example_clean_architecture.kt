
/**
 * –ü–û–¢–û–ö –î–ê–ù–ù–´–• –û–¢ UI –î–û –°–ï–†–í–ï–†–ê –ò –û–ë–†–ê–¢–ù–û
 * ===============================================
 */

// 1. PRESENTATION LAYER - UI
class LoginFragment {
    fun onLoginButtonClick() {
        // üëÜ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
        viewModel.login(email, password)
    }

    fun observeChanges() {
        // üëÄ –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º UI
        viewModel.state.observe { state ->
            when(state) {
                Loading -> showProgress()
                Success -> navigateToMain()
                Error -> showError()
            }
        }
    }
}

// 2. PRESENTATION LAYER - ViewModel
class LoginViewModel(private val loginUseCase: LoginUseCase) {
    fun login(email: String, password: String) {
        // üîÑ –°–≤—è–∑—É—é—â–µ–µ –∑–≤–µ–Ω–æ –º–µ–∂–¥—É UI –∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π
        viewModelScope.launch {
            _state.value = Loading
            try {
                val result = loginUseCase(email, password) // ‚¨áÔ∏è –í Domain
                _state.value = Success(result)
            } catch (e: Exception) {
                _state.value = Error(e.message)
            }
        }
    }
}

// 3. DOMAIN LAYER - Use Case (–ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞)
class LoginUseCase(private val authRepository: AuthRepository) {
    suspend operator fun invoke(email: String, password: String): User {
        // üß† –ë–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞ (–≤–∞–ª–∏–¥–∞—Ü–∏—è, –æ–±—Ä–∞–±–æ—Ç–∫–∞)
        validateInput(email, password)

        // ‚¨áÔ∏è –í—ã–∑—ã–≤–∞–µ–º Repository (–Ω–æ –Ω–µ –∑–Ω–∞–µ–º –ö–ê–ö –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç)
        val response = authRepository.login(LoginRequest(email, password))

        // üîÑ –ú–∞–ø–ø–∏–Ω–≥ –∏–∑ DTO –≤ Domain –º–æ–¥–µ–ª—å
        return response.toDomainUser()
    }
}

// 4. DOMAIN LAYER - Repository Interface
interface AuthRepository {
    // üìã –ö–æ–Ω—Ç—Ä–∞–∫—Ç - –ß–¢–û –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–¥–µ–ª–∞–Ω–æ (–Ω–æ –Ω–µ –ö–ê–ö)
    suspend fun login(request: LoginRequest): LoginResponse
}

// 5. DATA LAYER - Repository Implementation
class AuthRepositoryImpl(
    private val apiService: AuthApi,
    private val storage: SecureStorage
) : AuthRepository {

    override suspend fun login(request: LoginRequest): LoginResponse {
        // üåê –ö–ê–ö –∏–º–µ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ (HTTP, –±–∞–∑–∞, –∫—ç—à)
        val apiResponse = apiService.login(request.toDTO())

        // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
        storage.saveToken(apiResponse.token)

        return apiResponse.toDomainResponse()
    }
}

// 6. DATA LAYER - Network API
interface AuthApi {
    @POST("api/auth/login")
    suspend fun login(@Body request: LoginRequestDTO): LoginResponseDTO
}

/**
 * DEPENDENCY INJECTION - –ö–ê–ö –í–°–ï –°–í–Ø–ó–´–í–ê–ï–¢–°–Ø
 * ==========================================
 */

@Module
class DataModule {
    @Provides
    fun provideAuthRepository(
        apiService: AuthApi,
        storage: SecureStorage
    ): AuthRepository = AuthRepositoryImpl(apiService, storage)
}

@Module
class DomainModule {
    @Provides
    fun provideLoginUseCase(
        authRepository: AuthRepository
    ): LoginUseCase = LoginUseCase(authRepository)
}

/**
 * –ú–û–î–ï–õ–ò –ù–ê –ö–ê–ñ–î–û–ú –°–õ–û–ï
 * =====================
 */

// DOMAIN - –ß–∏—Å—Ç—ã–µ –º–æ–¥–µ–ª–∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
data class User(val id: String, val name: String, val email: String)

// DATA - DTO –¥–ª—è API
data class LoginRequestDTO(val email: String, val password: String)
data class LoginResponseDTO(val user: UserDTO, val token: String)

// PRESENTATION - UI —Å–æ—Å—Ç–æ—è–Ω–∏—è
sealed class LoginState {
    object Loading : LoginState()
    data class Success(val user: User) : LoginState()
    data class Error(val message: String) : LoginState()
}
